Requirements

Use your Pattern and PatternList from Lab 0. Make sure the Pattern stores the 
correct categorization as well as the detector values

Write a code which reads and stores all the patterns from each directory in the 
directory passed and then hands off each PatternList to your Ptron (so you won't
have to read them each time you make a pass!). Create your GUI in a JPanel 
inside a JFrame, and remember to setBounds(800, 800) and setVisible(true) in the
constructor! Assuming you put the inputs at the root of your project directory,
you could say:
        String where = System.getProperty("user.dir");
        File dataDir = new File(where + "/ptronData");
                
                or
        File dataDir = new File("ptronData");
                
to access them.

For testing purposes, include a Button and TextArea; when the user pushes the 
Button, display the next pattern in the TextArea.

Phase 2: Working ptron
Implement the learning algorithm; train it on each set until it gets all the 
patterns right. First, prepare to make debugging easy by writing an outputWts() 
method that displays the wts matrix in the TextArea when you press the Show Wts 
button. This will only take a few minutes, but could save you headaches later. 

Output how many correct/incorrect categorizations on each pass through the data, 
so you can see how it is doing, and maybe which letter it is learning to 
categorize). Guard this output with a boolean, so you can easily turn it off and 
on (and you will probably want to turn if off in Phase 3!).

Phase 3: Experimentation
Vary the values for theta (θ) and eta (η) and note how that changes the number 
of passes needed to learn to categorize perfectly. Specifically, add a loop to 
make the ratio of theta to eta (θ:η) 1:1, 10:1, 100:1, ... 10000000:1, and output 
the number of passes needed to categorize perfectly for each (in an easy to read 
form).

--------------------------------------------------------------------------------
Perceptron
A perceptron is a simple, learning, categorizer. It consists of a set of 
detectors (di), a set of weights (wi) -- one for each detector, a single 
McCollough/Pitts neuron, and a learning procedure.

Given a set of patterns and an indication for each if it is a member of the 
category, the task of the p'tron is to learn to correctly categorize them all. 
Then, with luck, it may be able to correctly categorize other, never before seen, 
inputs correctly as well.

Given a single stimlus pattern, the task of the perceptron is to decide if it 
is a member of a particular category. Its algorithm is:

    if (Σ di wi > θ)          // where θ is a positive constant threshold
        output yes (1)
    else output no (0)

Pseudocode for training:
    initialize wi to 0 for all i
    input training patterns

    while (errors) {
        errors = false;
        for each training pattern {
            categorize it
            if (incorrect) {
                errors = true;
                learn (see learning rule, below)
            } // if
       }  // for
    } // while

Learning rule:
Δwi = (T-O) di η 

Δwi is the change in wi 
O is the output of the p'tron (1 for yes, 0 for no) 
T is the correct (or teaching/target) answer (also 1 for yes, 0 for no), 
η is a small, positive, learning constant 

The exact values of θ and η are immaterial (the algorithm is fairly robust), 
although they must both be positive (!) and θ should probably be larger than η. 





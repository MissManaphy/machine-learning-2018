Listing /Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics

Full Directory:
*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/PatternList.java
*******************************************************************
	/*
	 * To change this license header, choose License Headers in Project Properties.
	 * To change this template file, choose Tools | Templates
	 * and open the template in the editor.
	 */
	package lab0.io_mechanics;
	
	/**
	 *
	 * @author sophiaanderson
	 */
	public class PatternList extends java.util.ArrayList<Pattern>
	{
	    // PatternList is now a synonym for java.util.ArrayList<Pattern> (almost)
	    
	    @Override
	    public String toString() {
	        String returnMe = "Full Directory:";
	        
	        for (Pattern nextP : this) {
	            returnMe += "\n" + nextP.toString();
	        }
	        
	        return returnMe;
	    }
	    
	} 



*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/Lab0IO_Mechanics.java
*******************************************************************
	/*
	 * To change this license header, choose License Headers in Project Properties.
	 * To change this template file, choose Tools | Templates
	 * and open the template in the editor.
	 */
	package lab0.io_mechanics;
	
	/**
	 *
	 * @author sophiaanderson
	 */
	public class Lab0IO_Mechanics {
	
	    /**
	     * @param args the command line arguments
	     */
	    public static void main(String[] args) {
	        new MechanicsFrame();
	    }
	    
	}



*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/MechanicsFrame.java
*******************************************************************
	/*
	 * To change this license header, choose License Headers in Project Properties.
	 * To change this template file, choose Tools | Templates
	 * and open the template in the editor.
	 */
	package lab0.io_mechanics;
	
	/**
	 *
	 * @author sophiaanderson
	 */
	public class MechanicsFrame extends javax.swing.JFrame {
	
	    /**
	     * Creates new form MechanicsFrame
	     */
	    public MechanicsFrame() {
	        initComponents();
	        add(new MechanicsPanel());
	        setTitle("Mechanics");
	        setBounds(55,55,600,400);
	        setVisible(true);
	    }
	
	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	    private void initComponents() {
	
	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	
	        pack();
	    }// </editor-fold>//GEN-END:initComponents
	
	    /**
	     * @param args the command line arguments
	     */
	    public static void main(String args[]) {
	        /* Set the Nimbus look and feel */
	        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	         */
	        try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(MechanicsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(MechanicsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(MechanicsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(MechanicsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	        //</editor-fold>
	
	        /* Create and display the form */
	        java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
	                new MechanicsFrame().setVisible(true);
	            }
	        });
	    }
	
	    // Variables declaration - do not modify//GEN-BEGIN:variables
	    // End of variables declaration//GEN-END:variables
	}



*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/StringList.java
*******************************************************************
	/*
	 * To change this license header, choose License Headers in Project Properties.
	 * To change this template file, choose Tools | Templates
	 * and open the template in the editor.
	 */
	package lab0.io_mechanics;
	import java.util.ArrayList;
	
	/**
	 *
	 * @author levenick
	 */
	public class StringList extends ArrayList<String>{
	
	    @Override
	    public String toString() {
	        String returnMe = "a list:";
	        
	        for (String nextS : this) {
	            returnMe += "\n\t" +nextS;
	        }
	        
	        return returnMe;
	    }
	    
	    
	    
	    public static void main(String[] args) {
	        StringList list = new StringList();
	        
	        list.add("foo");
	        list.add("bar");
	        list.add("foobar");
	        list.add("etc..");
	        
	        System.out.println("list = " + list.toString());
	    }
	}



*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/Pattern.java
*******************************************************************
	/*
	 * To change this license header, choose License Headers in Project Properties.
	 * To change this template file, choose Tools | Templates
	 * and open the template in the editor.
	 */
	package lab0.io_mechanics;
	
	/**
	 *
	 * @author sophiaanderson
	 */
	public class Pattern {
	    
	    String path = "";
	    String content = "";
	    String spacer = "*******************************************************************";
	    
	    public Pattern() {
	    }
	    
	    public Pattern(String filePath)
	    {
	        path = filePath;
	        MyReader mr = new MyReader(path);
	        while (mr.hasMoreData()){
	            content += "\t" + mr.giveMeTheNextLine() + "\n";
	        }
	    }
	    
	//    public void addContent(String fileContent)
	//    {
	//        content = fileContent;
	//    }
	//    
	    public String toString()
	    {
	        return spacer + "\n" + path + "\n" + spacer + "\n" + content + "\n" + "\n";
	    }
	    
	    
	    
	//pattern needs a constructor that is passed a path
	    
	}



*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/MechanicsFrame.form
*******************************************************************
	<?xml version="1.0" encoding="UTF-8" ?>
	
	<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
	  <Properties>
	    <Property name="defaultCloseOperation" type="int" value="3"/>
	  </Properties>
	  <SyntheticProperties>
	    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
	    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
	  </SyntheticProperties>
	  <AuxValues>
	    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
	    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
	    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
	    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
	    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
	    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
	    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
	    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
	    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
	    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,1,44,0,0,1,-112"/>
	  </AuxValues>
	
	  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
	</Form>



*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/MechanicsPanel.form
*******************************************************************
	<?xml version="1.0" encoding="UTF-8" ?>
	
	<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JPanelFormInfo">
	  <AuxValues>
	    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
	    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
	    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
	    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
	    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
	    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
	    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
	    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
	    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
	    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,1,-106,0,0,2,85"/>
	  </AuxValues>
	
	  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout">
	    <Property name="useNullLayout" type="boolean" value="true"/>
	  </Layout>
	  <SubComponents>
	    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
	      <AuxValues>
	        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
	      </AuxValues>
	      <Constraints>
	        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
	          <AbsoluteConstraints x="4" y="44" width="590" height="320"/>
	        </Constraint>
	      </Constraints>
	
	      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
	      <SubComponents>
	        <Component class="javax.swing.JTextArea" name="TextArea">
	          <Properties>
	            <Property name="columns" type="int" value="20"/>
	            <Property name="rows" type="int" value="5"/>
	          </Properties>
	        </Component>
	      </SubComponents>
	    </Container>
	    <Component class="javax.swing.JButton" name="Load">
	      <Properties>
	        <Property name="text" type="java.lang.String" value="Load"/>
	      </Properties>
	      <Events>
	        <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="LoadActionPerformed"/>
	      </Events>
	      <Constraints>
	        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
	          <AbsoluteConstraints x="110" y="10" width="97" height="-1"/>
	        </Constraint>
	      </Constraints>
	    </Component>
	    <Component class="javax.swing.JButton" name="save">
	      <Properties>
	        <Property name="text" type="java.lang.String" value="Save"/>
	      </Properties>
	      <Events>
	        <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="saveActionPerformed"/>
	      </Events>
	      <Constraints>
	        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
	          <AbsoluteConstraints x="400" y="10" width="88" height="-1"/>
	        </Constraint>
	      </Constraints>
	    </Component>
	    <Component class="javax.swing.JButton" name="list">
	      <Properties>
	        <Property name="text" type="java.lang.String" value="List Directory"/>
	      </Properties>
	      <Events>
	        <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="listActionPerformed"/>
	      </Events>
	      <Constraints>
	        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
	          <AbsoluteConstraints x="240" y="10" width="120" height="-1"/>
	        </Constraint>
	      </Constraints>
	    </Component>
	    <Component class="javax.swing.JButton" name="echoAll">
	      <Properties>
	        <Property name="text" type="java.lang.String" value="Echo All"/>
	      </Properties>
	      <Events>
	        <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="echoAllActionPerformed"/>
	      </Events>
	      <Constraints>
	        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
	          <AbsoluteConstraints x="250" y="370" width="-1" height="-1"/>
	        </Constraint>
	      </Constraints>
	    </Component>
	  </SubComponents>
	</Form>



*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/MyWriter.java
*******************************************************************
	package lab0.io_mechanics;
	
	// A minimal, undocumented convenience class -- who wrote this anyways?
	// Has the advantage (over a straight PrintWriter) of not needing try-catch blocks
	// ... and will prompt the user for where to put the file... 
	
	import java.io.*;
	import java.awt.*;
	
	public class MyWriter 
	{
	    protected PrintWriter ps;
	    
	    public MyWriter() {
	        FileDialog fd = new FileDialog(new Frame(), "Where would you like it?", FileDialog.SAVE);
	        fd.setFile("*.*");
	        fd.show();
	        String filename = fd.getDirectory() + fd.getFile();
	        try {
	            ps = new PrintWriter(new FileWriter(filename));
	        } catch(Exception e) {System.out.print("PW1: No such file! " + e);}
	    }
	    
	    public MyWriter(String f) {
	        try {
	            ps = new PrintWriter(new FileWriter(f));
	        } catch(Exception e) {System.out.print("PW2: No such file! " + e);}
	    }
	    
	    public void print(String s) {
	        ps.print(s);
	    }
	    
	    public void println(String s) {
	        print(s+"\n");
	    }
	    
	    public void close() {
	        ps.close();
	    }
	        
	}



*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/MyReader.java
*******************************************************************
	/*
	 * To change this license header, choose License Headers in Project Properties.
	 * To change this template file, choose Tools | Templates
	 * and open the template in the editor.
	 */
	package lab0.io_mechanics;
	
	/*
	 * MyReader.java
	 * A wrapper for a a BufferedReader including a FileDialog for easy file opening...
	 * Created on September 10, 2003, and modified intermittently thereafter
	 * @author  jrl
	 */
	
	import java.io.*;
	import java.awt.*;
	import java.net.*;
	import java.applet.*;
	
	public class MyReader {
	    
	    BufferedReader br;
	    String filename = "nothing, yet";
	
	    public String getFilename() {return filename;}      // So you can find out what the pathname was later
	    
	    public MyReader() {                                 // default, prompts user for file
	        openIt(getFileName());    
	    }
	    
	    public MyReader(String filename) {                  // opens the file passed
	        openIt(filename);
	    }
	    
	    public MyReader(String filename, Applet theApplet) { // opens a file from an Applet!
	        try {
	            URL theURL = new URL(theApplet.getDocumentBase(), filename);
	            InputStreamReader isr = new InputStreamReader(theURL.openStream());
	            br = new BufferedReader(isr);
	        } catch (Exception e) {System.out.println("MyReader -- bad file from net" + e);}
	    }
	    
	    private void openIt (String filename) {
		this.filename = filename;       // save the path so you can discover it later (if you want to)
	        try {
	            br = new BufferedReader(new FileReader(filename));
	        } catch (Exception e) {System.out.println("MyReader -- can't open " + filename + "!" + e);}
	    }
	    
	    public String giveMeTheNextLine() {
	        try {
	            return br.readLine();
	        } catch (Exception e) {System.out.println("MyReader -- eof?!" + e);}
	        return "";
	    }
	    
	    public boolean hasMoreData() {
	        try {
	            return br.ready();
	        } catch (Exception e) {System.out.println("MyReader -- disaster!" + e);}
	        return false;
	    }
	    
	    public void close() {
	        try {
	            br.close();
	        } catch (Exception e) {System.out.println("MyReader -- can't close that!" + e);}
	    }
	    
	    private String getFileName() {
	        FileDialog fd = new FileDialog(new Frame(), "Select Input File");
	        fd.setFile("input");
	        fd.show();
	        return fd.getDirectory()+fd.getFile();  // return the complete path
	    }
	    
	}



*******************************************************************
/Users/sophiaanderson/Desktop/2018-2019/Machine Learning/Labs/Lab0-IO_Mechanics/./src/lab0/io_mechanics/MechanicsPanel.java
*******************************************************************
	package lab0.io_mechanics;
	
	import java.awt.*;
	import java.io.File;
	import javax.swing.JFileChooser;
	
	/**
	 *
	 * @author sophiaanderson Aug 29, 2018 10:21:14 AM
	 */
	public class MechanicsPanel extends javax.swing.JPanel {
	
	    public MechanicsPanel() {
	        initComponents();
	        setLayout(null);
	        setVisible(true);
	    }
	
	    public void paintComponent(Graphics g) {
	        super.paintComponent(g);
	        g.fillOval(100,100,100,100);            // Just checking!
	    }
	    /** This method is called from within the constructor to
	     * initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is
	     * always regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	    private void initComponents() {
	
	        jScrollPane1 = new javax.swing.JScrollPane();
	        TextArea = new javax.swing.JTextArea();
	        Load = new javax.swing.JButton();
	        save = new javax.swing.JButton();
	        list = new javax.swing.JButton();
	        echoAll = new javax.swing.JButton();
	
	        setLayout(null);
	
	        TextArea.setColumns(20);
	        TextArea.setRows(5);
	        jScrollPane1.setViewportView(TextArea);
	
	        add(jScrollPane1);
	        jScrollPane1.setBounds(4, 44, 590, 320);
	
	        Load.setText("Load");
	        Load.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                LoadActionPerformed(evt);
	            }
	        });
	        add(Load);
	        Load.setBounds(110, 10, 97, 29);
	
	        save.setText("Save");
	        save.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                saveActionPerformed(evt);
	            }
	        });
	        add(save);
	        save.setBounds(400, 10, 88, 29);
	
	        list.setText("List Directory");
	        list.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                listActionPerformed(evt);
	            }
	        });
	        add(list);
	        list.setBounds(240, 10, 120, 29);
	
	        echoAll.setText("Echo All");
	        echoAll.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                echoAllActionPerformed(evt);
	            }
	        });
	        add(echoAll);
	        echoAll.setBounds(250, 370, 95, 29);
	    }// </editor-fold>//GEN-END:initComponents
	
	    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
	        TextArea.selectAll();
	        TextArea.replaceSelection("");
	        echoFile();
	    }//GEN-LAST:event_LoadActionPerformed
	
	    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
	        saveFile();
	    }//GEN-LAST:event_saveActionPerformed
	
	    private void listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listActionPerformed
	        listDirectory();
	    }//GEN-LAST:event_listActionPerformed
	
	    private void echoAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_echoAllActionPerformed
	        echoAll();
	    }//GEN-LAST:event_echoAllActionPerformed
	
	
	    // Variables declaration - do not modify//GEN-BEGIN:variables
	    private javax.swing.JButton Load;
	    private javax.swing.JTextArea TextArea;
	    private javax.swing.JButton echoAll;
	    private javax.swing.JScrollPane jScrollPane1;
	    private javax.swing.JButton list;
	    private javax.swing.JButton save;
	    // End of variables declaration//GEN-END:variables
	
	    private void echoFile() {
	        MyReader mr = new MyReader();
	        StringList list = new StringList();
	        while (mr.hasMoreData()){
	            TextArea.append(mr.giveMeTheNextLine() + "\n");
	        }
	        mr.close();
	    }
	    
	    Boolean DEBUG = true;
	    
	    void listDirectory() {
	        File directory = new File("./src/lab0/io_mechanics");
	        System.out.println("directory = " + directory.getAbsolutePath());
	
	        for (File nextFile : directory.listFiles()) {
	            if (nextFile.isFile()) {
	                System.out.println("reading... well... i would be if...." + nextFile);
	            }
	        }
	    }
	    
	    void echoAll() {
	        File directory = new File("./src/lab0/io_mechanics");
	        System.out.println("directory = " + directory.getAbsolutePath());
	        String ROOT_DIR = ""+ directory.getAbsolutePath();
	        
	        PatternList patterns = inputData(new File(ROOT_DIR));
	        TextArea.append("Listing " + ROOT_DIR + "\n\n" + patterns.toString());
	    }
	    
	    public PatternList inputData(File directory) {
	        PatternList patterns = new PatternList();
	
	        if (DEBUG) {
	            System.out.println("\nInputting from: " + directory + "\n");
	        }
	        java.io.File[] list = directory.listFiles();
	        for (int i = 0; i < list.length; i++) {
	            if (list[i].isFile()) {
	                if (DEBUG) {
	                    System.out.println("reading... " + list[i]);
	                }
	                patterns.add(new Pattern(list[i].getAbsolutePath()));
	            }
	            else System.out.println("list[i] = " + list[i] + " is NOT a file!");
	        }
	        
	        return patterns;
	    }
	
	    private void saveFile() {
	        MyWriter mw = new MyWriter();
	        String contents = TextArea.getText();
	        mw.print(contents);
	        mw.close();
	        
	    }
	}


